name: Autorelease

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      new_version:
        description: 'New tag version'
        default: 'patch'
  schedule:
    - cron: '0 2 * * 6' # saturday 2am
jobs:
  autorelease:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      USERNAME: ${{ github.actor }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
      pull-requests: write
    steps:
    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.USERNAME }}
        password: ${{ github.token }}

    - uses: actions/checkout@v5
    - uses: jdx/mise-action@v3

    - name: Setup git config
      run: |
        git config user.name actions-bot
        git config user.email actions-bot@users.noreply.github.com

    - name: Update Nix flake
      if: github.event_name != 'pull_request'
      run: nix flake update

    - name: Update Nix hashes
      if: github.event_name != 'pull_request'
      run: ./.github/update-nix-hashes.py

    - name: Create Pull Request if there is new stuff from updaters
      if: github.event_name != 'pull_request'
      uses: peter-evans/create-pull-request@v7
      id: pr_create
      with:
        commit-message: Updater script changes
        branch: updater-bot
        delete-branch: true
        title: "Updater: stuff changed"
        body: |
          Changes caused from update scripts

    - name: Stop if a pull request was created
      if: github.event_name != 'pull_request'
      env:
        PR_NUMBER: ${{ steps.pr_create.outputs.pull-request-number }}
      run: |
        if [[ ! -z "$PR_NUMBER" ]]; then
          echo "The update scripts changed something and a PR was created. Giving up deploy." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Try to build it
      run: 'nix build .#'

    - run: mkdir build -p && ls && pwd
    - run: GOOS=windows GOARCH=amd64 go build -o build/ts-fileserver-windows-amd64.exe ./cmd/ts-fileserver
    - run: go build -o build/ts-fileserver-linux-amd64 ./cmd/ts-fileserver

    - name: Make release if everything looks right
      if: github.event_name != 'pull_request'
      env:
        NEW_VERSION: ${{ github.event.inputs.new_version }}
      run: |
        if [[ ! -z "$NEW_VERSION" ]]; then
          NO_TAG=1 ./make_release "$NEW_VERSION"
          echo "New version: $(cat version.txt)" >> $GITHUB_STEP_SUMMARY
          echo "RELEASE_VERSION=$(cat version.txt)" >> $GITHUB_ENV
        fi

    - name: Create relase
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.RELEASE_VERSION }}
          TITLE: Release ${{ env.RELEASE_VERSION }}
      run: |
        gh release create "$TAG" \
          --title "$TITLE" \
          --generate-notes

    - uses: svenstaro/upload-release-action@v2
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/*
        tag: ${{ env.RELEASE_VERSION }}
        overwrite: true
        file_glob: true

    - name: "Build and publish container"
      env:
        TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      if: github.event_name != 'pull_request' && env.RELEASE_VERSION != ''
      run: |
        VERSION="$(cat version.txt)"
        docker build -t "$TAG:$VERSION" .
        docker tag "$TAG:$VERSION" "$TAG:latest"
        docker push "$TAG:$VERSION"
        docker push "$TAG:latest"
